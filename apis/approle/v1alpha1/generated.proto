/*
Copyright The KubeVault Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubevault.dev.operator.apis.approle.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultapproles,singular=vaultapprole,shortName=vp,categories={vault,approle,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultAppRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultAppRoleSpec spec = 2;

  optional VaultAppRoleStatus status = 3;
}

message VaultAppRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VaultAppRole items = 2;
}

// More info: https://www.vaultproject.io/api-docs/auth/approle
message VaultAppRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // RoleName is the Name of the AppRole
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  optional string role_name = 2;

  // Require secret_id to be presented when logging in using this AppRole.
  optional string bind_secret_id = 3;

  // List of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.
  repeated string secret_id_bound_cidrs = 4;

  // Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses.
  optional int64 secret_id_num_uses = 5;

  // Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which any SecretID expires.
  optional string secret_id_ttl = 6;

  // If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
  optional bool enable_local_secret_ids = 7;

  // The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.
  optional int64 token_ttl = 8;

  // The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.
  optional int64 token_max_ttl = 9;

  // List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.
  repeated string token_policies = 10;

  // List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.
  repeated string token_bound_cidrs = 11;

  // If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.
  optional int64 token_explicit_max_ttl = 12;

  // If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies.
  optional bool token_no_default_policy = 13;

  // The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited.
  optional int64 token_num_uses = 14;

  // The period, if any, to set on the token.
  optional int64 token_period = 15;

  // The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.
  optional string token_type = 16;
}

message VaultAppRoleStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates whether the policy successfully applied in vault or not or in progress
  // +optional
  optional string phase = 2;

  // Represents the latest available observations of a VaultPolicy.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

